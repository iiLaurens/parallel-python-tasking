from multiprocessing import Process, Manager
from time import sleep


def process_error_checking(object):
    def __init__(self, timeout):
        self.timeout = timeout

    def __call__(self, func):
        def new_func(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except KeyboardInterrupt:
                print("Keyboard interrupt in process: ", process_number)
        return new_func


@process_error_checking
def f(process_number):
    print("starting thread: ", process_number)
    i = 1
    while i < 3:
        print(process_number)
        i += 1
        sleep(2)
    # try:
    #     print("starting thread: ", process_number)
    #     i = 1
    #     while i < 3:
    #         print(process_number)
    #         i += 1
    #         sleep(2)
    # except KeyboardInterrupt:
    #     print("Keyboard interrupt in process: ", process_number)
    # finally:
    #     print("cleaning up thread", process_number)

if __name__ == '__main__':

    processes = []

    manager = Manager()

    for i in range(4):
        p = Process(target=f, args=(i,))
        p.start()
        processes.append(p)

    try:
        for process in processes:
            process.join()
    except KeyboardInterrupt:
        print("Keyboard interrupt in main")
    finally:
        print("Cleaning up Main")
